import{createIndex as c}from"pagefind";import{z as t}from"zod";var f=t.object({index:t.object({rootSelector:t.string().optional(),excludeSelectors:t.array(t.string()).optional(),forceLanguage:t.string().optional(),keepIndexUrl:t.boolean().optional(),verbose:t.boolean().optional(),logfile:t.string().optional()}).optional().default({}),directories:t.array(t.string()).optional().default([""]),site:t.string().optional().default("pagefind")}).optional().default({}),p=i=>f.parse(i);import{ZodError as g}from"zod";var d=i=>{let r=!0,l="astro-pagefind",o;return{name:l,hooks:{"astro:config:done":async({logger:n})=>{try{o=p(i)}catch(e){if(e instanceof g)r=!1,n.error("Invalid options for `security-txt`. `security.txt` will not be generated.");else throw e}},"astro:build:done":async({dir:n,logger:e})=>{if(r)try{let{index:a}=await c(o.index);e.info("Created Pagefind index."),o.directories.map(async s=>{await a?.addDirectory({path:new URL(s,n).pathname}),e.info(`Added ${s} to the index.`)}),await a?.writeFiles({outputPath:new URL(o.site,n).pathname}),e.info(`Wrote Pagefind files to ${o.site}.`)}catch{e.error("Error building Pagefind index. Search will not be available.")}}}}};var v=d;export{v as default};
//# sourceMappingURL=index.js.map